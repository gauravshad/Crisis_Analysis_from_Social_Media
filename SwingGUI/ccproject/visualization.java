/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.Desktop;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.net.URI;

/**
 *
 * @author Gaurav
 */
public class visualization extends javax.swing.JFrame {

    public String tableid;
    /**
     * Creates new form visualization
     */
    public visualization() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Data Table");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Bar Graph");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jButton3.setText("Location Map");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jButton4.setText("Heat Map");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addComponent(jButton4))
                .addGap(64, 64, 64))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap(148, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        
        BufferedWriter bw = null;
        try {
            // TODO add your handling code here:
            File htmlFile = new File("/home/ubuntu/ccproject/DataTable.htm");
            bw = new BufferedWriter(new FileWriter(htmlFile));
            bw.write("<!DOCTYPE html>\n" +
                    "\n" +
                    "<html>\n" +
                    "  <head>\n" +
                    "    <meta charset=\"UTF-8\">\n" +
                    "\n" +
                    "    <title>Data Table using Fusion Tables API</title>\n" +
                    "\n" +
                    "    <link href=\"/apis/fusiontables/docs/samples/style/default.css\"\n" +
                    "        rel=\"stylesheet\" type=\"text/css\">\n" +
                    "    <script type=\"text/javascript\" src=\"https://www.google.com/jsapi\"></script>\n" +
                    "    <script type=\"text/javascript\">\n" +
                    "      google.load('visualization', '1', { packages: ['table'] });\n" +
                    "\n" +
                    "      function drawTable() {\n" +
                    "        var query = \"SELECT 'location' as Location, \" +\n" +
                    "            \"'Crisis' as Crisis, 'Count' as Count \" +\n" +
                    "            'FROM ");
                                bw.write(tableid);
                                bw.write("';\n" +
                    "       \n" +
                    "        var queryText = encodeURIComponent(query);\n" +
                    "        var gvizQuery = new google.visualization.Query(\n" +
                    "            'http://www.google.com/fusiontables/gvizdata?tq=' + queryText);\n" +
                    "\n" +
                    "        gvizQuery.send(function(response) {\n" +
                    "          var table = new google.visualization.Table(\n" +
                    "              document.getElementById('visualization'));\n" +
                    "          table.draw(response.getDataTable(), {\n" +
                    "            showRowNumber: true\n" +
                    "          });\n" +
                    "        });\n" +
                    "      }\n" +
                    "\n" +
                    "      google.setOnLoadCallback(drawTable);\n" +
                    "    </script>\n" +
                    "  </head>\n" +
                    "  <body>\n" +
                    "   \n" +
                    "     <div id=\"visualization\"></div>\n" +
                    "  </body>\n" +
                    "</html>");
            try {
		
                Process p = Runtime.getRuntime().exec("/home/ubuntu/ccproject/DataTable.sh");
            } catch (IOException ex) {
                Logger.getLogger(visualization.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException ex) {
            Logger.getLogger(visualization.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                bw.close();
            } catch (IOException ex) {
                Logger.getLogger(visualization.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
       BufferedWriter bw = null;
        try {
            // TODO add your handling code here:
            File htmlFile = new File("/home/ubuntu/ccproject/LocationMap.htm");
            bw = new BufferedWriter(new FileWriter(htmlFile));
            bw.write("<!DOCTYPE html>\n" +
                    "<html>\n" +
                    "  <head>\n" +
                    "    <meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no\">\n" +
                    "    <meta charset=\"utf-8\">\n" +
                    "    <title>Fusion Tables layers</title>\n" +
                    "    <style>\n" +
                    "      /* Always set the map height explicitly to define the size of the div\n" +
                    "       * element that contains the map. */\n" +
                    "      #map {\n" +
                    "        height: 100%;\n" +
                    "      }\n" +
                    "      /* Optional: Makes the sample page fill the window. */\n" +
                    "      html, body {\n" +
                    "        height: 100%;\n" +
                    "        margin: 0;\n" +
                    "        padding: 0;\n" +
                    "      }\n" +
                    "    </style>\n" +
                    "  </head>\n" +
                    "  <body>\n" +
                    "    <div id=\"map\"></div>\n" +
                    "    <script>\n" +
                    "	\n" +
                    "      function initMap() {\n" +
                    "	\n" +
                    "        var map = new google.maps.Map(document.getElementById('map'), {\n" +
                    "          center: {lat: 0.0, lng: 0.0},\n" +
                    "          zoom: 2\n" +
                    "        });\n" +
                    "	\n" +
                    "        var layer = new google.maps.FusionTablesLayer({\n" +
                    "          query: {\n" +
                    "           select: '\\'Geocodable location\\'',\n" +
                    "            from:");
            bw.write("'"+tableid+"'"+"\n");
            bw.write(" }\n" +
                    "        });\n" +
                    "        layer.setMap(map);\n" +
                    "      }\n" +
                    "	\n" +
                    "    </script>\n" +
                    "    <script async defer\n" +
                    "    src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyB3jGYjaAcqukLFmfuJkEKzi6ZH3zpyibE&callback=initMap\">\n" +
                    "    </script>\n" +
                    "  </body>\n" +
                    "</html>");
            try {
                Process p = Runtime.getRuntime().exec("/home/ubuntu/ccproject/LocationMap.sh");
            } catch (IOException ex) {
                Logger.getLogger(visualization.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException ex) {
            Logger.getLogger(visualization.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                bw.close();
            } catch (IOException ex) {
                Logger.getLogger(visualization.class.getName()).log(Level.SEVERE, null, ex);
            }
        } // TODO add your handling code here:
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        BufferedWriter bw = null;
        try {
            // TODO add your handling code here:
            File htmlFile = new File("/home/ubuntu/ccproject/BarGraph.htm");
            bw = new BufferedWriter(new FileWriter(htmlFile));
            bw.write("<!DOCTYPE html>\n" +
                    "\n" +
                    "<html>\n" +
                    "  <head>\n" +
                    "    <meta charset=\"UTF-8\">\n" +
                    "\n" +
                    "    <title>Bar Chart using Fusion Tables API</title>\n" +
                    "\n" +
                    "    <script type=\"text/javascript\" src=\"https://www.google.com/jsapi\"></script>\n" +
                    "    <script type=\"text/javascript\">\n" +
                    "      google.load('visualization', '1', { packages: ['corechart', 'bar'] });\n" +
                    "\n" +
                    "      function drawVisualization() {\n" +
                    "        data = google.visualization.drawChart({\n" +
                    "          containerId: 'visualization',\n" +
                    "          dataSourceUrl: 'http://www.google.com/fusiontables/gvizdata?tq=',\n" +
                    "          query: 'SELECT location, Count FROM ");
                                bw.write(tableid);
                                bw.write("',\n" +
                    "          chartType: 'ColumnChart',\n" +
                    "          options: {\n" +
                    "            title: 'Vulnerability of a Location to Crisis',\n" +
                    "	 \n" +
                    "            vAxis: {\n" +
                    "              title: 'Location'\n" +
                    "            },\n" +
                    "            hAxis: {\n" +
                    "              title: 'Count'\n" +
                    "            }\n" +
                        "          }\n" +
                        "        });\n" +
                        "      }\n" +
                        "\n" +
                        "      google.setOnLoadCallback(drawVisualization);\n" +
                        "    </script>\n" +
                        "  </head>\n" +
                        "  <body>\n" +
                        "    <div id=\"visualization\" style=\"position: relative; height: 600px; width:1300px; top: 0px;\"></div>\n" +
                        "  </body>\n" +
                    "</html>");
            try {
               Process p = Runtime.getRuntime().exec("/home/ubuntu/ccproject/BarGraph.sh");
            } catch (IOException ex) {
                Logger.getLogger(visualization.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException ex) {
            Logger.getLogger(visualization.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                bw.close();
            } catch (IOException ex) {
                Logger.getLogger(visualization.class.getName()).log(Level.SEVERE, null, ex);
            }
        } // TODO add your handling code here:
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        BufferedWriter bw = null;
        try {
            // TODO add your handling code here:
            File htmlFile = new File("/home/ubuntu/ccproject/HeatMap.htm");
            bw = new BufferedWriter(new FileWriter(htmlFile));
            bw.write("<!DOCTYPE html>\n" +
                    "<html>\n" +
                    "  <head>\n" +
                    "    <style>\n" +
                    "      /* Always set the map height explicitly to define the size of the div\n" +
                    "       * element that contains the map. */\n" +
                    "      #map {\n" +
                    "        height: 100%;\n" +
                    "      }\n" +
                    "      /* Optional: Makes the sample page fill the window. */\n" +
                    "      html, body {\n" +
                    "        height: 100%;\n" +
                    "        margin: 0;\n" +
                    "        padding: 0;\n" +
                    "      }\n" +
                    "	#floating-panel {\n" +
                    "        position: absolute;\n" +
                    "        top: 10px;\n" +
                    "        left: 25%;\n" +
                    "        z-index: 5;\n" +
                    "        background-color: #fff;\n" +
                    "        padding: 5px;\n" +
                    "        border: 1px solid #999;\n" +
                    "        text-align: center;\n" +
                    "        font-family: 'Roboto','sans-serif';\n" +
                    "        line-height: 30px;\n" +
                    "        padding-left: 10px;\n" +
                    "      }\n" +
                    "      #floating-panel {\n" +
                    "        background-color: #fff;\n" +
                    "        border: 1px solid #999;\n" +
                    "        left: 25%;\n" +
                    "        padding: 5px;\n" +
                    "        position: absolute;\n" +
                    "        top: 10px;\n" +
                    "        z-index: 5;\n" +
                    "      }\n" +
                    "    \n" +
                    "    </style>\n" +
                    "  </head>\n" +
                    "  <body>\n" +
                    "	<div id=\"floating-panel\">\n" +
                    "      <button onclick=\"toggleHeatmap()\">Toggle Heatmap</button>\n" +
                    "      <button onclick=\"changeGradient()\">Change gradient</button>\n" +
                    "      <button onclick=\"changeRadius()\">Change radius</button>\n" +
                    "      <button onclick=\"changeOpacity()\">Change opacity</button>\n" +
                    "    </div>\n" +
                    "    <div id=\"map\"></div>\n" +
                    "    <script>\n" +
                    "      var map, heatmap;\n" +
                    "	var heatmapData = [];\n" +
                    "      function initMap() {\n" +
                    "        map = new google.maps.Map(document.getElementById('map'), {\n" +
                    "          zoom: 2,\n" +
                    "          center: {lat: 0.0, lng: 0.0},\n" +
                    "          \n" +
                    "        });\n" +
                    "	heatmap = new google.maps.visualization.HeatmapLayer({\n" +
                    "          data: heatmapData,\n" +
                    "          \n" +
                    "          map: map\n" +
                    "        });\n" +
                    "\n" +
                    "      }\n" +
                    "\n" +
                    "      function feed(results) {\n" +
                    "       \n" +
                    "	\n" +
                    "	for (var i = 0; i < results.rows.length; i++) {\n" +
                    "	\n" +
                    "          var temp = results.rows[i] + \"\";\n" +
                    "	var coords = temp.split(\" \");\n" +
                    "	var latLng = new google.maps.LatLng(coords[0], coords[1]);\n" +
                    "          heatmapData.push(latLng);\n" +
                    "        \n" +
                    "      }\n" +
                    "	\n" +
                    "	\n" +
                    "	}\n" +
                    "\n" +
                    "	function toggleHeatmap() {\n" +
                    "        heatmap.setMap(heatmap.getMap() ? null : map);\n" +
                    "      }\n" +
                    "\n" +
                    "      function changeGradient() {\n" +
                    "        var gradient = [\n" +
                    "          'rgba(0, 255, 255, 0)',\n" +
                    "          'rgba(0, 255, 255, 1)',\n" +
                    "          'rgba(0, 191, 255, 1)',\n" +
                    "          'rgba(0, 127, 255, 1)',\n" +
                    "          'rgba(0, 63, 255, 1)',\n" +
                    "          'rgba(0, 0, 255, 1)',\n" +
                    "          'rgba(0, 0, 223, 1)',\n" +
                    "          'rgba(0, 0, 191, 1)',\n" +
                    "          'rgba(0, 0, 159, 1)',\n" +
                    "          'rgba(0, 0, 127, 1)',\n" +
                    "          'rgba(63, 0, 91, 1)',\n" +
                    "          'rgba(127, 0, 63, 1)',\n" +
                    "          'rgba(191, 0, 31, 1)',\n" +
                    "          'rgba(255, 0, 0, 1)'\n" +
                    "        ]\n" +
                    "        heatmap.set('gradient', heatmap.get('gradient') ? null : gradient);\n" +
                    "      }\n" +
                    "\n" +
                    "      function changeRadius() {\n" +
                    "        heatmap.set('radius', heatmap.get('radius') ? null : 20);\n" +
                    "      }\n" +
                    "\n" +
                    "      function changeOpacity() {\n" +
                    "        heatmap.set('opacity', heatmap.get('opacity') ? null : 0.2);\n" +
                    "      }\n" +
                    "    </script>\n" +
                    "	<script async defer\n" +
                    "        src=\"https://www.googleapis.com/fusiontables/v1/query?sql=SELECT+Geocode(location)+FROM+");
                                bw.write(tableid);
                                bw.write("&hdrs=false&fields=rows&key=AIzaSyB3jGYjaAcqukLFmfuJkEKzi6ZH3zpyibE&callback=feed&libraries=visualization\">\n" +
                    "    </script>\n" +
                    "    <script async defer\n" +
                    "        src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyB3jGYjaAcqukLFmfuJkEKzi6ZH3zpyibE&libraries=visualization&callback=initMap\">\n" +
                    "    </script>\n" +
                    "	\n" +
                    "  </body>\n" +
                    "</html>");
            try {
                Process p = Runtime.getRuntime().exec("/home/ubuntu/ccproject/HeatMap.sh");
            } catch (IOException ex) {
                Logger.getLogger(visualization.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException ex) {
            Logger.getLogger(visualization.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                bw.close();
            } catch (IOException ex) {
                Logger.getLogger(visualization.class.getName()).log(Level.SEVERE, null, ex);
            }
        } // TODO add your handling code here:
    }//GEN-LAST:event_jButton4MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(visualization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(visualization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(visualization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(visualization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new visualization().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    // End of variables declaration//GEN-END:variables
}
